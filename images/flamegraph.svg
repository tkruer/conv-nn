<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="631063"><g><title>conv_nn`DYLD-STUB$$free (490 samples, 0.08%)</title><rect x="0.0266%" y="149" width="0.0776%" height="15" fill="rgb(227,0,7)" fg:x="168" fg:w="490"/><text x="0.2766%" y="159.50"></text></g><g><title>conv_nn`DYLD-STUB$$malloc (145 samples, 0.02%)</title><rect x="2.2131%" y="133" width="0.0230%" height="15" fill="rgb(217,0,24)" fg:x="13966" fg:w="145"/><text x="2.4631%" y="143.50"></text></g><g><title>conv_nn`__rdl_alloc (110 samples, 0.02%)</title><rect x="2.2361%" y="133" width="0.0174%" height="15" fill="rgb(221,193,54)" fg:x="14111" fg:w="110"/><text x="2.4861%" y="143.50"></text></g><g><title>conv_nn`ndarray::dimension::dimension_trait::Dimension::is_contiguous (2,048 samples, 0.32%)</title><rect x="2.2541%" y="133" width="0.3245%" height="15" fill="rgb(248,212,6)" fg:x="14225" fg:w="2048"/><text x="2.5041%" y="143.50"></text></g><g><title>conv_nn`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (125 samples, 0.02%)</title><rect x="2.5841%" y="133" width="0.0198%" height="15" fill="rgb(208,68,35)" fg:x="16307" fg:w="125"/><text x="2.8341%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (120 samples, 0.02%)</title><rect x="2.5848%" y="117" width="0.0190%" height="15" fill="rgb(232,128,0)" fg:x="16312" fg:w="120"/><text x="2.8348%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (88 samples, 0.01%)</title><rect x="2.5899%" y="101" width="0.0139%" height="15" fill="rgb(207,160,47)" fg:x="16344" fg:w="88"/><text x="2.8399%" y="111.50"></text></g><g><title>conv_nn`DYLD-STUB$$malloc (142 samples, 0.02%)</title><rect x="3.0994%" y="117" width="0.0225%" height="15" fill="rgb(228,23,34)" fg:x="19559" fg:w="142"/><text x="3.3494%" y="127.50"></text></g><g><title>conv_nn`__rdl_alloc (94 samples, 0.01%)</title><rect x="3.1219%" y="117" width="0.0149%" height="15" fill="rgb(218,30,26)" fg:x="19701" fg:w="94"/><text x="3.3719%" y="127.50"></text></g><g><title>conv_nn`ndarray::iterators::to_vec_mapped (4,360 samples, 0.69%)</title><rect x="3.1371%" y="117" width="0.6909%" height="15" fill="rgb(220,122,19)" fg:x="19797" fg:w="4360"/><text x="3.3871%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (782 samples, 0.12%)</title><rect x="3.8280%" y="117" width="0.1239%" height="15" fill="rgb(250,228,42)" fg:x="24157" fg:w="782"/><text x="4.0780%" y="127.50"></text></g><g><title>conv_nn`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (9,557 samples, 1.51%)</title><rect x="2.6039%" y="133" width="1.5144%" height="15" fill="rgb(240,193,28)" fg:x="16432" fg:w="9557"/><text x="2.8539%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,048 samples, 0.17%)</title><rect x="3.9522%" y="117" width="0.1661%" height="15" fill="rgb(216,20,37)" fg:x="24941" fg:w="1048"/><text x="4.2022%" y="127.50"></text></g><g><title>conv_nn`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice (19,225 samples, 3.05%)</title><rect x="4.1183%" y="133" width="3.0464%" height="15" fill="rgb(206,188,39)" fg:x="25989" fg:w="19225"/><text x="4.3683%" y="143.50">con..</text></g><g><title>conv_nn`ndarray::dimension::do_slice (10,509 samples, 1.67%)</title><rect x="5.4995%" y="117" width="1.6653%" height="15" fill="rgb(217,207,13)" fg:x="34705" fg:w="10509"/><text x="5.7495%" y="127.50"></text></g><g><title>conv_nn`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (11,269 samples, 1.79%)</title><rect x="7.1647%" y="133" width="1.7857%" height="15" fill="rgb(231,73,38)" fg:x="45214" fg:w="11269"/><text x="7.4147%" y="143.50">c..</text></g><g><title>conv_nn`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (9,423 samples, 1.49%)</title><rect x="7.4573%" y="117" width="1.4932%" height="15" fill="rgb(225,20,46)" fg:x="47060" fg:w="9423"/><text x="7.7073%" y="127.50"></text></g><g><title>conv_nn`ndarray::iterators::to_vec_mapped (250 samples, 0.04%)</title><rect x="8.9505%" y="133" width="0.0396%" height="15" fill="rgb(210,31,41)" fg:x="56483" fg:w="250"/><text x="9.2005%" y="143.50"></text></g><g><title>conv_nn`ndarray::zip::Zip&lt;(P1,),D&gt;::and (1,028 samples, 0.16%)</title><rect x="8.9901%" y="133" width="0.1629%" height="15" fill="rgb(221,200,47)" fg:x="56733" fg:w="1028"/><text x="9.2401%" y="143.50"></text></g><g><title>conv_nn`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (8,251 samples, 1.31%)</title><rect x="9.1530%" y="133" width="1.3075%" height="15" fill="rgb(226,26,5)" fg:x="57761" fg:w="8251"/><text x="9.4030%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (230 samples, 0.04%)</title><rect x="10.4604%" y="133" width="0.0364%" height="15" fill="rgb(249,33,26)" fg:x="66012" fg:w="230"/><text x="10.7104%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (840 samples, 0.13%)</title><rect x="10.4972%" y="133" width="0.1331%" height="15" fill="rgb(235,183,28)" fg:x="66244" fg:w="840"/><text x="10.7472%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3,163 samples, 0.50%)</title><rect x="10.6303%" y="133" width="0.5012%" height="15" fill="rgb(221,5,38)" fg:x="67084" fg:w="3163"/><text x="10.8803%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,061 samples, 0.17%)</title><rect x="11.1366%" y="133" width="0.1681%" height="15" fill="rgb(247,18,42)" fg:x="70279" fg:w="1061"/><text x="11.3866%" y="143.50"></text></g><g><title>libsystem_platform.dylib`__bzero (213 samples, 0.03%)</title><rect x="11.3047%" y="133" width="0.0338%" height="15" fill="rgb(241,131,45)" fg:x="71340" fg:w="213"/><text x="11.5547%" y="143.50"></text></g><g><title>conv_nn`conv_nn::conv_layers::ConvLayer::back_propagate (71,280 samples, 11.30%)</title><rect x="0.1139%" y="149" width="11.2952%" height="15" fill="rgb(249,31,29)" fg:x="719" fg:w="71280"/><text x="0.3639%" y="159.50">conv_nn`conv_nn::..</text></g><g><title>libsystem_platform.dylib`_platform_memset (446 samples, 0.07%)</title><rect x="11.3385%" y="133" width="0.0707%" height="15" fill="rgb(225,111,53)" fg:x="71553" fg:w="446"/><text x="11.5885%" y="143.50"></text></g><g><title>conv_nn`ndarray::linalg::impl_linalg::general_mat_vec_mul_impl (74,459 samples, 11.80%)</title><rect x="11.4171%" y="85" width="11.7990%" height="15" fill="rgb(238,160,17)" fg:x="72049" fg:w="74459"/><text x="11.6671%" y="95.50">conv_nn`ndarray::..</text></g><g><title>conv_nn`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (74,454 samples, 11.80%)</title><rect x="11.4179%" y="69" width="11.7982%" height="15" fill="rgb(214,148,48)" fg:x="72054" fg:w="74454"/><text x="11.6679%" y="79.50">conv_nn`ndarray::..</text></g><g><title>conv_nn`&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize (74,501 samples, 11.81%)</title><rect x="11.4163%" y="133" width="11.8056%" height="15" fill="rgb(232,36,49)" fg:x="72044" fg:w="74501"/><text x="11.6663%" y="143.50">conv_nn`&lt;ndarray::..</text></g><g><title> 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize (74,501 samples, 11.81%)</title><rect x="11.4163%" y="117" width="11.8056%" height="15" fill="rgb(209,103,24)" fg:x="72044" fg:w="74501"/><text x="11.6663%" y="127.50"> 2]&gt;&gt; as ndarray::..</text></g><g><title> 1]&gt;&gt;&gt;&gt;::dot (74,501 samples, 11.81%)</title><rect x="11.4163%" y="101" width="11.8056%" height="15" fill="rgb(229,88,8)" fg:x="72044" fg:w="74501"/><text x="11.6663%" y="111.50"> 1]&gt;&gt;&gt;&gt;::dot</text></g><g><title>conv_nn`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (19,605 samples, 3.11%)</title><rect x="23.2303%" y="133" width="3.1067%" height="15" fill="rgb(213,181,19)" fg:x="146598" fg:w="19605"/><text x="23.4803%" y="143.50">con..</text></g><g><title>conv_nn`ndarray::iterators::to_vec_mapped (6,656 samples, 1.05%)</title><rect x="26.3370%" y="133" width="1.0547%" height="15" fill="rgb(254,191,54)" fg:x="166203" fg:w="6656"/><text x="26.5870%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (69 samples, 0.01%)</title><rect x="27.3808%" y="117" width="0.0109%" height="15" fill="rgb(241,83,37)" fg:x="172790" fg:w="69"/><text x="27.6308%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (72 samples, 0.01%)</title><rect x="27.3988%" y="133" width="0.0114%" height="15" fill="rgb(233,36,39)" fg:x="172904" fg:w="72"/><text x="27.6488%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (104 samples, 0.02%)</title><rect x="27.4218%" y="133" width="0.0165%" height="15" fill="rgb(226,3,54)" fg:x="173049" fg:w="104"/><text x="27.6718%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (69 samples, 0.01%)</title><rect x="27.4274%" y="117" width="0.0109%" height="15" fill="rgb(245,192,40)" fg:x="173084" fg:w="69"/><text x="27.6774%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (93 samples, 0.01%)</title><rect x="27.4389%" y="133" width="0.0147%" height="15" fill="rgb(238,167,29)" fg:x="173157" fg:w="93"/><text x="27.6889%" y="143.50"></text></g><g><title>conv_nn`conv_nn::dense_layer::DenseLayer::back_propagate (101,284 samples, 16.05%)</title><rect x="11.4092%" y="149" width="16.0497%" height="15" fill="rgb(232,182,51)" fg:x="71999" fg:w="101284"/><text x="11.6592%" y="159.50">conv_nn`conv_nn::dense_la..</text></g><g><title>conv_nn`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (204 samples, 0.03%)</title><rect x="27.6518%" y="133" width="0.0323%" height="15" fill="rgb(231,60,39)" fg:x="174500" fg:w="204"/><text x="27.9018%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (201 samples, 0.03%)</title><rect x="27.6522%" y="117" width="0.0319%" height="15" fill="rgb(208,69,12)" fg:x="174503" fg:w="201"/><text x="27.9022%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (172 samples, 0.03%)</title><rect x="27.6568%" y="101" width="0.0273%" height="15" fill="rgb(235,93,37)" fg:x="174532" fg:w="172"/><text x="27.9068%" y="111.50"></text></g><g><title>conv_nn`conv_nn::mxpl::MxplLayer::back_propagate (1,426 samples, 0.23%)</title><rect x="27.4589%" y="149" width="0.2260%" height="15" fill="rgb(213,116,39)" fg:x="173283" fg:w="1426"/><text x="27.7089%" y="159.50"></text></g><g><title>conv_nn`ndarray::dimension::is_layout_f (273 samples, 0.04%)</title><rect x="27.6849%" y="149" width="0.0433%" height="15" fill="rgb(222,207,29)" fg:x="174709" fg:w="273"/><text x="27.9349%" y="159.50"></text></g><g><title>conv_nn`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (620 samples, 0.10%)</title><rect x="27.7296%" y="149" width="0.0982%" height="15" fill="rgb(206,96,30)" fg:x="174991" fg:w="620"/><text x="27.9796%" y="159.50"></text></g><g><title>conv_nn`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice (925 samples, 0.15%)</title><rect x="27.8278%" y="149" width="0.1466%" height="15" fill="rgb(218,138,4)" fg:x="175611" fg:w="925"/><text x="28.0778%" y="159.50"></text></g><g><title>conv_nn`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (250 samples, 0.04%)</title><rect x="27.9744%" y="149" width="0.0396%" height="15" fill="rgb(250,191,14)" fg:x="176536" fg:w="250"/><text x="28.2244%" y="159.50"></text></g><g><title>conv_nn`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (290 samples, 0.05%)</title><rect x="28.0153%" y="149" width="0.0460%" height="15" fill="rgb(239,60,40)" fg:x="176794" fg:w="290"/><text x="28.2653%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_free (1,980 samples, 0.31%)</title><rect x="28.0614%" y="149" width="0.3138%" height="15" fill="rgb(206,27,48)" fg:x="177085" fg:w="1980"/><text x="28.3114%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (391 samples, 0.06%)</title><rect x="28.3777%" y="149" width="0.0620%" height="15" fill="rgb(225,35,8)" fg:x="179081" fg:w="391"/><text x="28.6277%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (118 samples, 0.02%)</title><rect x="28.4598%" y="149" width="0.0187%" height="15" fill="rgb(250,213,24)" fg:x="179599" fg:w="118"/><text x="28.7098%" y="159.50"></text></g><g><title>conv_nn`conv_nn::cnn::CNN::back_propagate (179,586 samples, 28.46%)</title><rect x="0.0214%" y="165" width="28.4577%" height="15" fill="rgb(247,123,22)" fg:x="135" fg:w="179586"/><text x="0.2714%" y="175.50">conv_nn`conv_nn::cnn::CNN::back_propagate</text></g><g><title>conv_nn`DYLD-STUB$$free (2,223 samples, 0.35%)</title><rect x="28.4880%" y="149" width="0.3523%" height="15" fill="rgb(231,138,38)" fg:x="179777" fg:w="2223"/><text x="28.7380%" y="159.50"></text></g><g><title>conv_nn`ndarray::dimension::dimension_trait::Dimension::is_contiguous (5,327 samples, 0.84%)</title><rect x="30.4418%" y="133" width="0.8441%" height="15" fill="rgb(231,145,46)" fg:x="192107" fg:w="5327"/><text x="30.6918%" y="143.50"></text></g><g><title>conv_nn`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::build_uninit (4,278 samples, 0.68%)</title><rect x="31.2885%" y="133" width="0.6779%" height="15" fill="rgb(251,118,11)" fg:x="197450" fg:w="4278"/><text x="31.5385%" y="143.50"></text></g><g><title>conv_nn`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice (64,299 samples, 10.19%)</title><rect x="31.9664%" y="133" width="10.1890%" height="15" fill="rgb(217,147,25)" fg:x="201728" fg:w="64299"/><text x="32.2164%" y="143.50">conv_nn`ndarray..</text></g><g><title>conv_nn`ndarray::dimension::do_slice (38,522 samples, 6.10%)</title><rect x="36.0511%" y="117" width="6.1043%" height="15" fill="rgb(247,81,37)" fg:x="227505" fg:w="38522"/><text x="36.3011%" y="127.50">conv_nn`..</text></g><g><title>conv_nn`DYLD-STUB$$malloc (2,024 samples, 0.32%)</title><rect x="49.2891%" y="117" width="0.3207%" height="15" fill="rgb(209,12,38)" fg:x="311045" fg:w="2024"/><text x="49.5391%" y="127.50"></text></g><g><title>conv_nn`__rdl_alloc (1,545 samples, 0.24%)</title><rect x="49.6098%" y="117" width="0.2448%" height="15" fill="rgb(227,1,9)" fg:x="313069" fg:w="1545"/><text x="49.8598%" y="127.50"></text></g><g><title>conv_nn`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::build_uninit (38,604 samples, 6.12%)</title><rect x="49.8560%" y="117" width="6.1173%" height="15" fill="rgb(248,47,43)" fg:x="314623" fg:w="38604"/><text x="50.1060%" y="127.50">conv_nn`..</text></g><g><title>conv_nn`ndarray::zip::Zip&lt;(P1,P2),D&gt;::and (21,921 samples, 3.47%)</title><rect x="52.4997%" y="101" width="3.4737%" height="15" fill="rgb(221,10,30)" fg:x="331306" fg:w="21921"/><text x="52.7497%" y="111.50">con..</text></g><g><title>conv_nn`ndarray::zip::Zip&lt;(P1,P2),D&gt;::and (4,365 samples, 0.69%)</title><rect x="55.9733%" y="117" width="0.6917%" height="15" fill="rgb(210,229,1)" fg:x="353227" fg:w="4365"/><text x="56.2233%" y="127.50"></text></g><g><title>conv_nn`ndarray::zip::Zip&lt;(P1,P2,PLast),D&gt;::collect_with_partial (122,364 samples, 19.39%)</title><rect x="56.6650%" y="117" width="19.3901%" height="15" fill="rgb(222,148,37)" fg:x="357592" fg:w="122364"/><text x="56.9150%" y="127.50">conv_nn`ndarray::zip::Zip&lt;(P1,..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11,112 samples, 1.76%)</title><rect x="76.0552%" y="117" width="1.7608%" height="15" fill="rgb(234,67,33)" fg:x="479956" fg:w="11112"/><text x="76.3052%" y="127.50"></text></g><g><title>conv_nn`ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Mul&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (239,293 samples, 37.92%)</title><rect x="42.1554%" y="133" width="37.9190%" height="15" fill="rgb(247,98,35)" fg:x="266027" fg:w="239293"/><text x="42.4054%" y="143.50">conv_nn`ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::a..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14,245 samples, 2.26%)</title><rect x="77.8171%" y="117" width="2.2573%" height="15" fill="rgb(247,138,52)" fg:x="491075" fg:w="14245"/><text x="78.0671%" y="127.50">l..</text></g><g><title>conv_nn`ndarray::numeric::impl_numeric::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::sum (17,241 samples, 2.73%)</title><rect x="80.0744%" y="133" width="2.7321%" height="15" fill="rgb(213,79,30)" fg:x="505320" fg:w="17241"/><text x="80.3244%" y="143.50">co..</text></g><g><title>conv_nn`ndarray::zip::Zip&lt;(P1,),D&gt;::and (20,584 samples, 3.26%)</title><rect x="82.8065%" y="133" width="3.2618%" height="15" fill="rgb(246,177,23)" fg:x="522561" fg:w="20584"/><text x="83.0565%" y="143.50">con..</text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1,552 samples, 0.25%)</title><rect x="86.0683%" y="133" width="0.2459%" height="15" fill="rgb(230,62,27)" fg:x="543145" fg:w="1552"/><text x="86.3183%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (20,006 samples, 3.17%)</title><rect x="86.3142%" y="133" width="3.1702%" height="15" fill="rgb(216,154,8)" fg:x="544697" fg:w="20006"/><text x="86.5642%" y="143.50">lib..</text></g><g><title>libsystem_platform.dylib`__bzero (1,442 samples, 0.23%)</title><rect x="89.4950%" y="133" width="0.2285%" height="15" fill="rgb(244,35,45)" fg:x="564770" fg:w="1442"/><text x="89.7450%" y="143.50"></text></g><g><title>conv_nn`conv_nn::conv_layers::ConvLayer::forward_propagate (385,561 samples, 61.10%)</title><rect x="28.8458%" y="149" width="61.0971%" height="15" fill="rgb(251,115,12)" fg:x="182035" fg:w="385561"/><text x="29.0958%" y="159.50">conv_nn`conv_nn::conv_layers::ConvLayer::forward_propagate</text></g><g><title>libsystem_platform.dylib`_platform_memset (1,384 samples, 0.22%)</title><rect x="89.7235%" y="133" width="0.2193%" height="15" fill="rgb(240,54,50)" fg:x="566212" fg:w="1384"/><text x="89.9735%" y="143.50"></text></g><g><title>conv_nn`ndarray::numeric_util::unrolled_dot (17,304 samples, 2.74%)</title><rect x="89.9500%" y="69" width="2.7420%" height="15" fill="rgb(233,84,52)" fg:x="567641" fg:w="17304"/><text x="90.2000%" y="79.50">co..</text></g><g><title>conv_nn`ndarray::linalg::impl_linalg::general_mat_vec_mul_impl (17,481 samples, 2.77%)</title><rect x="89.9466%" y="85" width="2.7701%" height="15" fill="rgb(207,117,47)" fg:x="567620" fg:w="17481"/><text x="90.1966%" y="95.50">co..</text></g><g><title>conv_nn`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (156 samples, 0.02%)</title><rect x="92.6920%" y="69" width="0.0247%" height="15" fill="rgb(249,43,39)" fg:x="584945" fg:w="156"/><text x="92.9420%" y="79.50"></text></g><g><title>conv_nn`&lt;ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize (17,528 samples, 2.78%)</title><rect x="89.9454%" y="133" width="2.7775%" height="15" fill="rgb(209,38,44)" fg:x="567612" fg:w="17528"/><text x="90.1954%" y="143.50">co..</text></g><g><title> 2]&gt;&gt; as ndarray::linalg::impl_linalg::Dot&lt;ndarray::ArrayBase&lt;S2,ndarray::dimension::dim::Dim&lt;[usize (17,528 samples, 2.78%)</title><rect x="89.9454%" y="117" width="2.7775%" height="15" fill="rgb(236,212,23)" fg:x="567612" fg:w="17528"/><text x="90.1954%" y="127.50"> 2..</text></g><g><title> 1]&gt;&gt;&gt;&gt;::dot (17,528 samples, 2.78%)</title><rect x="89.9454%" y="101" width="2.7775%" height="15" fill="rgb(242,79,21)" fg:x="567612" fg:w="17528"/><text x="90.1954%" y="111.50"> 1..</text></g><g><title>conv_nn`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (78 samples, 0.01%)</title><rect x="92.7262%" y="117" width="0.0124%" height="15" fill="rgb(211,96,35)" fg:x="585161" fg:w="78"/><text x="92.9762%" y="127.50"></text></g><g><title>conv_nn`conv_nn::activation::forward (129 samples, 0.02%)</title><rect x="92.7240%" y="133" width="0.0204%" height="15" fill="rgb(253,215,40)" fg:x="585147" fg:w="129"/><text x="92.9740%" y="143.50"></text></g><g><title>conv_nn`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (584 samples, 0.09%)</title><rect x="92.7446%" y="117" width="0.0925%" height="15" fill="rgb(211,81,21)" fg:x="585277" fg:w="584"/><text x="92.9946%" y="127.50"></text></g><g><title>conv_nn`ndarray::iterators::to_vec_mapped (212 samples, 0.03%)</title><rect x="92.8372%" y="117" width="0.0336%" height="15" fill="rgb(208,190,38)" fg:x="585861" fg:w="212"/><text x="93.0872%" y="127.50"></text></g><g><title>conv_nn`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_fn (812 samples, 0.13%)</title><rect x="92.7445%" y="133" width="0.1287%" height="15" fill="rgb(235,213,38)" fg:x="585276" fg:w="812"/><text x="92.9945%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (127 samples, 0.02%)</title><rect x="92.9124%" y="133" width="0.0201%" height="15" fill="rgb(237,122,38)" fg:x="586336" fg:w="127"/><text x="93.1624%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (96 samples, 0.02%)</title><rect x="92.9173%" y="117" width="0.0152%" height="15" fill="rgb(244,218,35)" fg:x="586367" fg:w="96"/><text x="93.1673%" y="127.50"></text></g><g><title>conv_nn`conv_nn::dense_layer::DenseLayer::forward_propagate (18,927 samples, 3.00%)</title><rect x="89.9428%" y="149" width="2.9992%" height="15" fill="rgb(240,68,47)" fg:x="567596" fg:w="18927"/><text x="90.1928%" y="159.50">con..</text></g><g><title>conv_nn`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (150 samples, 0.02%)</title><rect x="94.3627%" y="133" width="0.0238%" height="15" fill="rgb(210,16,53)" fg:x="595488" fg:w="150"/><text x="94.6127%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (140 samples, 0.02%)</title><rect x="94.3643%" y="117" width="0.0222%" height="15" fill="rgb(235,124,12)" fg:x="595498" fg:w="140"/><text x="94.6143%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (117 samples, 0.02%)</title><rect x="94.3679%" y="101" width="0.0185%" height="15" fill="rgb(224,169,11)" fg:x="595521" fg:w="117"/><text x="94.6179%" y="111.50"></text></g><g><title>conv_nn`conv_nn::mxpl::MxplLayer::forward_propagate (9,122 samples, 1.45%)</title><rect x="92.9421%" y="149" width="1.4455%" height="15" fill="rgb(250,166,2)" fg:x="586523" fg:w="9122"/><text x="93.1921%" y="159.50"></text></g><g><title>conv_nn`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::slice (2,979 samples, 0.47%)</title><rect x="94.3898%" y="149" width="0.4721%" height="15" fill="rgb(242,216,29)" fg:x="595659" fg:w="2979"/><text x="94.6398%" y="159.50"></text></g><g><title>conv_nn`ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Mul&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (4,365 samples, 0.69%)</title><rect x="94.8631%" y="149" width="0.6917%" height="15" fill="rgb(230,116,27)" fg:x="598646" fg:w="4365"/><text x="95.1131%" y="159.50"></text></g><g><title>conv_nn`ndarray::numeric::impl_numeric::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::sum (2,437 samples, 0.39%)</title><rect x="95.5548%" y="149" width="0.3862%" height="15" fill="rgb(228,99,48)" fg:x="603011" fg:w="2437"/><text x="95.8048%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_free (11,183 samples, 1.77%)</title><rect x="95.9415%" y="149" width="1.7721%" height="15" fill="rgb(253,11,6)" fg:x="605451" fg:w="11183"/><text x="96.1915%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1,935 samples, 0.31%)</title><rect x="97.7146%" y="149" width="0.3066%" height="15" fill="rgb(247,143,39)" fg:x="616641" fg:w="1935"/><text x="97.9646%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (66 samples, 0.01%)</title><rect x="98.0287%" y="149" width="0.0105%" height="15" fill="rgb(236,97,10)" fg:x="618623" fg:w="66"/><text x="98.2787%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (87 samples, 0.01%)</title><rect x="98.0492%" y="101" width="0.0138%" height="15" fill="rgb(233,208,19)" fg:x="618752" fg:w="87"/><text x="98.2992%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (150 samples, 0.02%)</title><rect x="98.0428%" y="149" width="0.0238%" height="15" fill="rgb(216,164,2)" fg:x="618712" fg:w="150"/><text x="98.2928%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (137 samples, 0.02%)</title><rect x="98.0449%" y="133" width="0.0217%" height="15" fill="rgb(220,129,5)" fg:x="618725" fg:w="137"/><text x="98.2949%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (133 samples, 0.02%)</title><rect x="98.0455%" y="117" width="0.0211%" height="15" fill="rgb(242,17,10)" fg:x="618729" fg:w="133"/><text x="98.2955%" y="127.50"></text></g><g><title>conv_nn`conv_nn::cnn::CNN::forward_propagate (439,414 samples, 69.63%)</title><rect x="28.4791%" y="165" width="69.6308%" height="15" fill="rgb(242,107,0)" fg:x="179721" fg:w="439414"/><text x="28.7291%" y="175.50">conv_nn`conv_nn::cnn::CNN::forward_propagate</text></g><g><title>libsystem_platform.dylib`_platform_memmove (273 samples, 0.04%)</title><rect x="98.0666%" y="149" width="0.0433%" height="15" fill="rgb(251,28,31)" fg:x="618862" fg:w="273"/><text x="98.3166%" y="159.50"></text></g><g><title>conv_nn`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (1,177 samples, 0.19%)</title><rect x="98.1249%" y="149" width="0.1865%" height="15" fill="rgb(233,223,10)" fg:x="619230" fg:w="1177"/><text x="98.3749%" y="159.50"></text></g><g><title>conv_nn`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (6,523 samples, 1.03%)</title><rect x="98.3119%" y="149" width="1.0337%" height="15" fill="rgb(215,21,27)" fg:x="620410" fg:w="6523"/><text x="98.5619%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (391 samples, 0.06%)</title><rect x="99.3576%" y="133" width="0.0620%" height="15" fill="rgb(232,23,21)" fg:x="627009" fg:w="391"/><text x="99.6076%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (398 samples, 0.06%)</title><rect x="99.3566%" y="149" width="0.0631%" height="15" fill="rgb(244,5,23)" fg:x="627003" fg:w="398"/><text x="99.6066%" y="159.50"></text></g><g><title>conv_nn`conv_nn::dense_layer::DenseLayer::update (8,212 samples, 1.30%)</title><rect x="98.1187%" y="165" width="1.3013%" height="15" fill="rgb(226,81,46)" fg:x="619191" fg:w="8212"/><text x="98.3687%" y="175.50"></text></g><g><title>conv_nn`conv_nn::mnist_impl::get_random_sample (289 samples, 0.05%)</title><rect x="99.4200%" y="165" width="0.0458%" height="15" fill="rgb(247,70,30)" fg:x="627403" fg:w="289"/><text x="99.6700%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (226 samples, 0.04%)</title><rect x="99.4300%" y="149" width="0.0358%" height="15" fill="rgb(212,68,19)" fg:x="627466" fg:w="226"/><text x="99.6800%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (213 samples, 0.03%)</title><rect x="99.4321%" y="133" width="0.0338%" height="15" fill="rgb(240,187,13)" fg:x="627479" fg:w="213"/><text x="99.6821%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (211 samples, 0.03%)</title><rect x="99.4324%" y="117" width="0.0334%" height="15" fill="rgb(223,113,26)" fg:x="627481" fg:w="211"/><text x="99.6824%" y="127.50"></text></g><g><title>conv_nn`indicatif::progress_bar::ProgressBar::set_message (94 samples, 0.01%)</title><rect x="99.4703%" y="165" width="0.0149%" height="15" fill="rgb(206,192,2)" fg:x="627720" fg:w="94"/><text x="99.7203%" y="175.50"></text></g><g><title>conv_nn`&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_all (138 samples, 0.02%)</title><rect x="99.4896%" y="53" width="0.0219%" height="15" fill="rgb(241,108,4)" fg:x="627842" fg:w="138"/><text x="99.7396%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`write (136 samples, 0.02%)</title><rect x="99.4899%" y="37" width="0.0216%" height="15" fill="rgb(247,173,49)" fg:x="627844" fg:w="136"/><text x="99.7399%" y="47.50"></text></g><g><title>conv_nn`console::term::Term::flush (141 samples, 0.02%)</title><rect x="99.4893%" y="101" width="0.0223%" height="15" fill="rgb(224,114,35)" fg:x="627840" fg:w="141"/><text x="99.7393%" y="111.50"></text></g><g><title>conv_nn`console::term::Term::write_through (140 samples, 0.02%)</title><rect x="99.4894%" y="85" width="0.0222%" height="15" fill="rgb(245,159,27)" fg:x="627841" fg:w="140"/><text x="99.7394%" y="95.50"></text></g><g><title>conv_nn`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_all (139 samples, 0.02%)</title><rect x="99.4896%" y="69" width="0.0220%" height="15" fill="rgb(245,172,44)" fg:x="627842" fg:w="139"/><text x="99.7396%" y="79.50"></text></g><g><title>conv_nn`indicatif::draw_target::Drawable::draw (207 samples, 0.03%)</title><rect x="99.4880%" y="117" width="0.0328%" height="15" fill="rgb(236,23,11)" fg:x="627832" fg:w="207"/><text x="99.7380%" y="127.50"></text></g><g><title>libsystem_c.dylib`isatty (101 samples, 0.02%)</title><rect x="99.5221%" y="85" width="0.0160%" height="15" fill="rgb(205,117,38)" fg:x="628047" fg:w="101"/><text x="99.7721%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (101 samples, 0.02%)</title><rect x="99.5221%" y="69" width="0.0160%" height="15" fill="rgb(237,72,25)" fg:x="628047" fg:w="101"/><text x="99.7721%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (88 samples, 0.01%)</title><rect x="99.5381%" y="85" width="0.0139%" height="15" fill="rgb(244,70,9)" fg:x="628148" fg:w="88"/><text x="99.7881%" y="95.50"></text></g><g><title>conv_nn`console::unix_term::terminal_size (197 samples, 0.03%)</title><rect x="99.5216%" y="101" width="0.0312%" height="15" fill="rgb(217,125,39)" fg:x="628044" fg:w="197"/><text x="99.7716%" y="111.50"></text></g><g><title>conv_nn`indicatif::draw_target::ProgressDrawTarget::width (203 samples, 0.03%)</title><rect x="99.5213%" y="117" width="0.0322%" height="15" fill="rgb(235,36,10)" fg:x="628042" fg:w="203"/><text x="99.7713%" y="127.50"></text></g><g><title>conv_nn`indicatif::state::BarState::draw (490 samples, 0.08%)</title><rect x="99.4864%" y="133" width="0.0776%" height="15" fill="rgb(251,123,47)" fg:x="627822" fg:w="490"/><text x="99.7364%" y="143.50"></text></g><g><title>conv_nn`indicatif::state::BarState::update_estimate_and_draw (501 samples, 0.08%)</title><rect x="99.4853%" y="149" width="0.0794%" height="15" fill="rgb(221,13,13)" fg:x="627815" fg:w="501"/><text x="99.7353%" y="159.50"></text></g><g><title>conv_nn`indicatif::progress_bar::ProgressBar::tick_inner (504 samples, 0.08%)</title><rect x="99.4852%" y="165" width="0.0799%" height="15" fill="rgb(238,131,9)" fg:x="627814" fg:w="504"/><text x="99.7352%" y="175.50"></text></g><g><title>conv_nn`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map_inplace (1,102 samples, 0.17%)</title><rect x="99.5715%" y="165" width="0.1746%" height="15" fill="rgb(211,50,8)" fg:x="628359" fg:w="1102"/><text x="99.8215%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,210 samples, 0.19%)</title><rect x="99.7721%" y="165" width="0.1917%" height="15" fill="rgb(245,182,24)" fg:x="629625" fg:w="1210"/><text x="100.0221%" y="175.50"></text></g><g><title>conv_nn`conv_nn::cnn::CNN::train (630,821 samples, 99.96%)</title><rect x="0.0030%" y="181" width="99.9617%" height="15" fill="rgb(242,14,37)" fg:x="19" fg:w="630821"/><text x="0.2530%" y="191.50">conv_nn`conv_nn::cnn::CNN::train</text></g><g><title>conv_nn`conv_nn::mnist_impl::load_mnist::process_images (74 samples, 0.01%)</title><rect x="99.9661%" y="181" width="0.0117%" height="15" fill="rgb(246,228,12)" fg:x="630849" fg:w="74"/><text x="100.2161%" y="191.50"></text></g><g><title>conv_nn`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (74 samples, 0.01%)</title><rect x="99.9661%" y="165" width="0.0117%" height="15" fill="rgb(213,55,15)" fg:x="630849" fg:w="74"/><text x="100.2161%" y="175.50"></text></g><g><title>conv_nn`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (74 samples, 0.01%)</title><rect x="99.9661%" y="149" width="0.0117%" height="15" fill="rgb(209,9,3)" fg:x="630849" fg:w="74"/><text x="100.2161%" y="159.50"></text></g><g><title>conv_nn`rust_mnist::Mnist::new (91 samples, 0.01%)</title><rect x="99.9816%" y="181" width="0.0144%" height="15" fill="rgb(230,59,30)" fg:x="630947" fg:w="91"/><text x="100.2316%" y="191.50"></text></g><g><title>dyld`start (631,062 samples, 100.00%)</title><rect x="0.0000%" y="277" width="99.9998%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="631062"/><text x="0.2500%" y="287.50">dyld`start</text></g><g><title>conv_nn`main (631,062 samples, 100.00%)</title><rect x="0.0000%" y="261" width="99.9998%" height="15" fill="rgb(220,109,13)" fg:x="0" fg:w="631062"/><text x="0.2500%" y="271.50">conv_nn`main</text></g><g><title>conv_nn`std::rt::lang_start_internal (631,062 samples, 100.00%)</title><rect x="0.0000%" y="245" width="99.9998%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="631062"/><text x="0.2500%" y="255.50">conv_nn`std::rt::lang_start_internal</text></g><g><title>conv_nn`std::rt::lang_start::_{{closure}} (631,061 samples, 100.00%)</title><rect x="0.0002%" y="229" width="99.9997%" height="15" fill="rgb(215,41,42)" fg:x="1" fg:w="631061"/><text x="0.2502%" y="239.50">conv_nn`std::rt::lang_start::_{{closure}}</text></g><g><title>conv_nn`std::sys::backtrace::__rust_begin_short_backtrace (631,061 samples, 100.00%)</title><rect x="0.0002%" y="213" width="99.9997%" height="15" fill="rgb(224,123,36)" fg:x="1" fg:w="631061"/><text x="0.2502%" y="223.50">conv_nn`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>conv_nn`conv_nn::main (631,061 samples, 100.00%)</title><rect x="0.0002%" y="197" width="99.9997%" height="15" fill="rgb(240,125,3)" fg:x="1" fg:w="631061"/><text x="0.2502%" y="207.50">conv_nn`conv_nn::main</text></g><g><title>all (631,063 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(205,98,50)" fg:x="0" fg:w="631063"/><text x="0.2500%" y="303.50"></text></g></svg></svg>